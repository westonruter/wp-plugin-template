# .github/workflows/static-analysis.yml
#
# This workflow was generated by Gemini 2.5 Pro.
#
# GitHub Actions workflow for running static analysis checks on the WordPress plugin.
# This workflow is generated based on the package.json, composer.json, and
# lint-staged.config.js files provided.

name: Static Analysis

# Run this workflow on all pushes and pull requests.
on:
    push:
        branches:
            - main
    pull_request:
        types:
            - opened
            - reopened
            - synchronize

jobs:
    lint:
        name: Static Analysis Checks
        runs-on: ubuntu-latest
        # Stop the job early if a previous step fails.
        timeout-minutes: 5

        steps:
            # 1. Check out the repository code.
            - name: Checkout repository
              uses: actions/checkout@v4

            # 2. Read PHP version from composer.json.
            # This avoids duplicating the version number in the workflow file.
            - name: Read PHP version
              id: php-version
              run: echo "version=$(jq -r .config.platform.php composer.json)" >> $GITHUB_OUTPUT

            # 3. Set up PHP environment.
            # The version is sourced from your composer.json to avoid duplication.
            # Caching composer dependencies for faster subsequent runs.
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ steps.php-version.outputs.version }}
                  extensions: mbstring, dom, fileinfo, xml, curl # Common extensions for WP development
                  coverage: none # No code coverage needed for linting
                  tools: composer:v2

            # 4. Cache Composer dependencies.
            # This step speeds up the build by caching the vendor directory.
            - name: Cache Composer dependencies
              uses: actions/cache@v4
              with:
                  path: vendor
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-composer-

            # 5. Install Composer dependencies.
            - name: Install Composer dependencies
              run: composer install --prefer-dist --no-progress

            # 6. Set up Node.js environment.
            # This allows us to run npm scripts.
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version-file: '.nvmrc'
                  cache: 'npm' # Automatically caches npm dependencies

            # 7. Install npm dependencies.
            # 'npm ci' is used for CI environments as it's generally faster and safer
            # than 'npm install' because it uses the package-lock.json.
            - name: Install npm dependencies
              run: npm ci

            # 8. Validate composer.json.
            # This is a quick check to ensure the composer.json file is valid.
            - name: Validate composer.json
              run: composer validate --strict

            # --- Run Linters ---
            # Each linter runs in a separate step for clearer error reporting.

            - name: Run PHPStan static analysis
              run: composer phpstan

            - name: Run PHP_CodeSniffer for coding standards
              run: composer phpcs

            - name: Run TypeScript compiler check
              run: npx tsc

            - name: Run JavaScript linter
              run: npm run lint:js

            - name: Run CSS linter
              run: npm run lint:css

            - name: Check Composer configuration format
              run: composer normalize --dry-run

            - name: Check Markdown format
              run: npm run lint:md

            - name: Verify version consistency
              run: npm run verify-version-consistency

            - name: Check README.md format
              run: npm run transform-readme
